#+STARTUP: overview
* repos
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "http://elpa.emacs-china.org/org/") t)
  ;;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  ;;(add-to-list 'package-archives
  ;;             '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC
* path for mac
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns))
     (exec-path-from-shell-initialize)))
#+end_src
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  ;;(setq org-protocol-default-tte-key "l")
  (server-start)
  (require 'cl)
  (global-hl-line-mode 1)
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-splash-screen t)
  (global-linum-mode t)
  (global-auto-revert-mode 1)
  (scroll-bar-mode -1)
  (setq cursor-type 'bar)
  (setq make-backup-files nil)
  (setq ring-bell-function 'ignore)
  (delete-selection-mode 1)
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
  ;; (set-face-attribute 'default nil :height 300)
  ;;ins
  (global-set-key (kbd "C-x y") 'overwrite-mode)
  ;;自动换行
  ;;(setq truncate-lines nil)
  (add-hook 'w3m-mode-hook (lambda () (setq truncate-lines nil)))
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  ;;(set-default-font "HanziPen SC:pixelsize=20:weight=normal:slant=normal:width=normal:spacing=0:scalable=true")
#+END_SRC
* english & chinese
中文和英文对齐
#+begin_src emacs-lisp
  (use-package cnfonts
    :ensure t
    :config
    (cnfonts-enable)
    (global-set-key (kbd "s--") 'cnfonts-decrease-fontsize)
    (global-set-key (kbd "s-=") 'cnfonts-increase-fontsize)

    )
 #+end_src
* recent buffer
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-item 10)

#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    ;;安装字体，不然后面主题图标会出错’,刚下载完第一次需要安装
    ;;(all-the-icons-install-fonts)
    )

  (use-package doom-themes
    :requires all-the-icons
    :ensure t
    :init
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-solarized-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

#+END_SRC

* orgmode
#+BEGIN_SRC emacs-lisp
  (use-package org 
    :ensure t
    :pin org
    :config
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    ;; for inserting inactive dates
    (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))
    (setq org-hide-leading-stars t)
    ;;代码块中的code上色
    (setq org-src-fontify-natively t)


    (use-package org-bullets
      :ensure t
      :config
      :hook (org-mode-hook . org-bullets-mode)
      ;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      )
    )
  (custom-set-variables
   '(org-export-html-postamble nil)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

#+END_SRC

#+RESULTS:

* pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package pomodoro
    :bind
    ("s-p" . org-pomodoro))
#+END_SRC
* GTD
get things done！花更多的时间关注下一件要做的事
** 定义任务状态
变量org-todo-keywords用于指定可给任务赋予的状态关键词。该变量的值为一组序列（sequence）构成的列表。每一个序列以符号type或sequence开头，其后则是一组用于定义任务状态关键词的字符串。若这一组字符串中的某一个为竖线|，则在竖线前的所有字符串代表任务未结束的状态，之后的则代表任务结束的状态。若没有竖线，则仅最后一个字符串代表任务结束的状态，其之前所有的字符串都代表任务未结束的状态。这样的type或sequence序列可以定义多个。但是对于一般的任务管理来说，只定义一个就足够了。
#+BEGIN_SRC emacs-lisp
  ;;(setq org-todo-keywords
  ;;    '((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")
  ;;	))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "ONMYWAY(o)" "MAYBE(m)" "WAIT(w)" "|"
                    "DONE(d)" "CANCELLED(c)" "BLOCKING(b)")))
  ;;任务切到done时 自动加上时间戳
  (setq org-log-done 'time)
  (setq org-todo-keyword-faces
        '(("NEXT" .      (:background "red" :foreground "white" :weight bold))
          ("SOMEDAY" .   (:background "DarkOrange":foreground "MediumBlue" :weight bold))
          ("PENDING" .   (:background "LightGreen" :foreground "gray" :weight bold))
          ("TODO" .      (:background "DarkOrange" :foreground "black" :weight bold))
          ("DONE" .      (:background "azure" :foreground "Darkgreen" :weight bold))
          ("ABORT" .     (:background "gray" :foreground "black"))
          ))

  ;; 优先级范围和默认任务的优先级
  (setq org-highest-priority ?A)
  (setq org-lowest-priority  ?E)
  (setq org-default-priority ?E)
  ;; 优先级醒目外观
  (setq org-priority-faces
        '((?A . (:background "red" :foreground "white" :weight bold))
          (?B . (:background "DarkOrange" :foreground "white" :weight bold))
          (?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
          (?D . (:background "DodgerBlue" :foreground "black" :weight bold))
          (?E . (:background "SkyBlue" :foreground "black" :weight bold))
          ))

  ;; 自动同步父级任务
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
*** 说明
- ！：切换到该状态时会自动增加时间戳
- @ ：切换到该状态时要求输入文字说明
- 如果同时设定@和！，使用“@/!”
*** 快捷键

| key          | 功能         |
| C-c C-t      | 状态定义界面 |
| S-left/right | 切换状态     |
| S-up/down    | 优先级切换   |
** 任务组标签
在Org mode中，当光标处于某个任务条目上时，按下快捷键C-c C-c，即可为该任务设置标签。对于任务组，我会为其加上标签TG予以识别。默认情况下，某一层级条目的标签会被其所包含的所有子条目继承。这样一来，当想要通过搜索标签TG来查看所有任务组时，具体的细节任务也会一并列出，干扰视线。为此，需要设置变量org-tags-exclude-from-inheritance，对TG标签禁用继承。
#+begin_src emacs-lisp
 (setq org-tags-exclude-from-inheritance '("TG"))
#+end_src

** org-Agenda
日程
*** 自定义日程视图简介
Org mode中的日程视图（Agenda view）具有强大的模式匹配与搜索能力。通过过滤用户指定的任务状态关键词、标签、时间戳以及自定义条件，可以生成几乎可以满足用户任何需求的视图。以数学的方式来讲，这就相当于将整个复杂的任务体系投影到我们所关注的不同空间中，对任务进行多角度地审视与把握，从而使我们在做任务管理的时候达到理清思路、聚集重点、不放过任何细节的良好效果。
**** 格式
日程视图的定义需要通过设置变量org-agenda-custom-commands来完成。该变量是一个列表，其中的每一项对应一个视图设置。这个视图设置的基本格式为：(key desc type match settings files)
- key：当用户执行org-agenda命令时，会弹出*Agenda Commands*缓冲区，其中包含了系统默认和用户自定义的日程视图。每个日程视图均对应一个快捷字母。当用户按下这个字母时，则可以进入到相应的视图中查看。这里的key则代表快捷字母。

- desc：日程视图的说明。

- type：日程视图的类型，即用于定义将哪些类型的任务条目收录到该视图中。通常用到的类型有：

  1. agenda：基于日或周的日程。

  2. todo：包含有特定状态关键词的任务条目。

  3. alltodo：所有处于未结束状态的任务条目，即，状态关键词为org-todo-keywords设置中竖线之前的。

  4. tags：包含指定标签的条目。

- match：用于指定与之前type对应的匹配条件。例如，当type为todo时，match若为"DONE"，则匹配状态关键词为DONE的任务条目。如果没有匹配条件需要定义，则这一项为空字符串。

- settings：用于指定匹配时应满足的一系列选项设置。settings的格式类似用于定义局部变量的let形式，即((option1 value1) (option2 value2) ...)

  1. org-agenda-skip-function：用于设定忽略条件的函数对象。

  2. org-agenda-overriding-header：用于设定日程视图的台头提示信息。

  3. org-agenda-files：这个变量的值是一个字符串列表，用于指定从哪些Org文件中提取信息。默认情况是从所有的Org文件中提取信息。

- files：用于指定当执行了org-store-agenda-views命令后需要将日程视图自动导出的文件。可以是HTML格式，也可以是纯文本格式。这个功能非常方便：当用户将所有的视图都定义好后，可以定期地直接将其全部导出。既可以放在HTTP服务器上统一浏览，也可以在审阅后存档，形成历史记录。
**** 视图组
随着日积月累，当用户定义的日程视图比较多时，管理起来就会较为混乱，同时可供绑定的字母快捷键也开始不够用。为此，可以将功能、类别相似的视图归为一组。这个组视图在org-agenda-custom-commands中的定义方式为：
 (Group-key . desc)
其中的Group-key为一个字母，指定了组的快捷键。
当组定义好了之后，随后便可以定义组内的各个日程视图。每个日程视图的定义与前面所述相同，
 (Group-KeyView-Key desc type match settings files)
只是其key为两个字母，第一个字母为Group-key，第二个字母View-key为日程视图自己的快捷捷。当用户执行org-agenda时，按下Group-key先进入组视图，再按下View-key则进入到指定的日程视图中。
**** code
#+begin_src emacs-lisp
  ;; Skip entries which only have timestamp but no TODO keywords.
  (defun org-agenda-skip-only-timestamp-entries ()
    "排除有时间戳但是没有todo关键字的条目."
    (org-agenda-skip-entry-if 'nottodo 'any))
  ;; Skip entries which are not deadlines.
  (defun org-agenda-skip-not-deadline-entries ()
    "忽略不包含DEADLINE时间戳的条目."
    (org-agenda-skip-entry-if 'notdeadline))
  ;; Skip entries which are not finished.
  (defun org-agenda-skip-unfinished-entries ()
    "忽略所有不包含DONE状态关键词的任务条目."
    (org-agenda-skip-entry-if 'nottodo '("DONE")))
  ;; Skip unscheduled entries.
  (defun wc/org-agenda-skip-scheduled-entries ()
    "忽略所有已经加了时间戳、状态关键词为ONMYWAY、WAIT或DELEGATED的任务条目。同时，包含了TG标签的任务也被排除在外。这是因为任务组只是具体任务的容器，故不参与到实际任务的安排中。."
    (org-agenda-skip-entry-if 'timestamp
                              'todo '("ONMYWAY" "WAIT" "MAYBE")
                              'regexp ":TG:"))
  (defvar  org-agenda-directory "~/org/agenda"
    "Agenda日程根目录."
    )
  ;;定义总的默认视图与各个项目自己的默认视图


  (setq org-agenda-custom-commands
        '(
          ;; Display general agenda for each project.
          ("A" . "Default agenda view")
          ("Aa" "Agenda for all projects"
           agenda ""
           ((org-agenda-skip-function 'org-agenda-skip-only-timestamp-entries)
            (org-agenda-overriding-header "Agenda for all projects: "))
           (concat org-agenda-directory "/out/Agenda-All.html"))
          ("Ac" "Study"
           agenda ""
           ((org-agenda-skip-function 'org-agenda-skip-only-timestamp-entries)
            (org-agenda-overriding-header "Agenda for study: ")
            ;;从study目录下的org文件中抽取符合条件的条目
            (org-agenda-files (list (concat org-directory "/study"))))
           (concat org-agenda-directory "/out/Agenda-Study.html"))
          ;; Inbox for displaying unscheduled tasks.
          ("I" . "Inbox")
          ("Ia" "Inbox for all unfinished TODOs"
           alltodo ""
           ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled-entries)
            (org-agenda-overriding-header "Inbox items: "))
           (concat org-agenda-directory "/out/Inbox-All.html"))
          ("Ic" "Study"
           alltodo ""
           ((org-agenda-skip-function 'wc/org-agenda-skip-scheduled-entries)
            (org-agenda-overriding-header "Inbox items for study: ")
            (org-agenda-files (list (concat org-directory "/study"))))
           '(concat org-agenda-directory "/out/Inbox-Study.html"))


           ("c" "别逛了！！进来闲着啊~"
            ((tags "PRIORITY=\"A\""
                   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                    (org-agenda-overriding-header "这些任务就给你看看，千万别做，就放着:")))
             (agenda "")
             (alltodo "")))
           ))
          (setq org-agenda-files (list "~/org/gcal.org"
                                       "~/org/i.org"
                                       "~/org/schedule.org"
                                       "~/org/workinbonree.org"
                                       "~/org/inbox.org"))
#+end_src
** org-capture
org收集工具
#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-capture-templates
        '(
          ("a" "Appointment" entry (file  "~/org/gcal.org" )
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("l" "Link" entry (file+headline "~/org/links.org" "Links")
           "* %? [[%:link][%:description]] \nCaptured On: %U" :prepend t)
          ("p" "web notes" entry (file+function "~/org/notes.org" org-capture-template-goto-link)
           "** %?\nSource:[[%:link][%:description]] \n%u\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n")
          ("L" "web bookmarks" entry (file+headline "~/org/bookmarks.org" "bookmarks")
           "* %?[[%:link][%:description]] \nCaptured On: %U" :prepend t)
          ("b" "Blog idea" entry (file+headline "~/org/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/org/i.org" "To Do")
           "* TODO %?\n%u" :clock-in t :clock-resume t :prepend t)
          ("n" "Note" entry (file+headline "~/org/i.org" "Note space")
           "* %?\n%u" :prepend t)
          ("x" "inbox" entry (file "~/org/inbox.org")
           "* %?\n%T" :clock-in t :clock-resume t :prepend t)
          ))
  ;;找到一个正确插入的位置
  (defun org-capture-template-goto-link ()
    (org-capture-put :target (list 'file+headline
                                   (nth 1 (org-capture-get :target))
                                   (org-capture-get :annotation)))
    (org-capture-put-target-region-and-position)
    (widen)
    (let ((hd (nth 2 (org-capture-get :target))))
      (goto-char (point-min))
      (if (re-search-forward
           (format org-complex-heading-regexp-format (regexp-quote hd)) nil t)
          (org-end-of-subtree)
        (goto-char (point-max))
        (or (bolp) (insert "\n"))
        (insert "* " hd "\n"))))

#+end_src
* packages
** try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
 (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+End_SRC
** ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-scope 'frame)
      ;;(setq aw-dispatch-always 't)
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      ;;(global-set-key (kbd "C-x p") 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
#+END_SRC
** Swiper / Ivy / Counsel
Swiper gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
** yasnippet get code by typing short keys
#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode)
    (use-package yasnippet-snippets
      :ensure t)
    )
#+END_SRC
** Avy - navigate by searching for a letter on the screen and jumping to it
See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (:map global-map
          ;;跳转到能看到的字符前,甚至替代了ace-window
          ("C-r" . avy-goto-word-0)
          ("C-;" . avy-goto-char-timer)
          ("M-g l" . avy-goto-line)
          ("M-g f" . avy-copy-region)
          ("M-g c" . avy-copy-line)
          ("M-g k" . avy-kill-region)
          ("M-g m" . avy-move-region)
          ("M-g d" . avy-kill-whole-line)
          )
    )
#+END_SRC
** youdao
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :commands
    (youdao-dictionary-search-at-point+))
    (global-set-key (kbd "C-q") 'youdao-dictionary-search-at-point+)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t)
    (setq company-backends
          '((company-files company-yasnippet company-capf company-keywords)
            (company-abbrev company-dabbrev)))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
    )
  ;;为每个模式定制群组’
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           '(company-elisp)))
            )


                                          ;company box mode
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC
** Reveal.js
#+BEGIN_SRC emacs-lisp  :tangle no
  (use-package ox-reveal
    :ensure t
    :init
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )
  (use-package htmlize
    :ensure t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+END_SRC
** Misc packages
#+BEGIN_SRC emacs-lisp
       ; flashes the cursor's line when you scroll
       ; 高亮当前行
       (use-package beacon
       :ensure t
       :config
       (beacon-mode 1)
       ; (setq beacon-color "#666600")
       )

       ; deletes all the whitespace when you hit backspace or delete
       (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t))
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
            (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("M--"   . treemacs-select-window)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

#+END_SRC
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode t)
    (setq projectile-completion-system 'ivy)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode t)
      (define-key counsel-grep-map (kbd "C-c p s g") 'counsel-projectile-grep)
      (define-key counsel-ag-map (kbd "C-c p s s") 'counsel-projectile-ag)
      )
    )
#+end_src
** pop window for quit
#+begin_src emacs-lisp
  (use-package popwin
    :ensure
    :config
    (popwin-mode t))
#+end_src
** log
#+begin_src emacs-lisp
  (use-package command-log-mode
    :config
    (global-command-log-mode t))
#+end_src
** revert C-x 1
再按一次 C-x 1 恢复关闭的其他窗口
#+begin_src emacs-lisp
  (use-package zygospore
    :ensure t
    :config
    (global-set-key (kbd "C-x 1")  'zygospore-toggle-delete-other-windows))
#+end_src
** w3m
#+begin_src emacs-lisp
  (use-package w3m
    :ensure
    :commands (w3m))
#+end_src
** image
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :bind ("C-S-y" . org-download-yank)  
    :config
    ;; add support to dired
    (add-hook 'dired-mode-hook 'org-download-enable)
    ;; 设置org中图片宽度
    (setq org-image-actual-width '(350))
  )
#+end_src
* diredmode
#+BEGIN_SRC emacs-lisp
  ;;递归删除拷贝
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  ;;重用buffer
  (put 'dired-find-alternate-file 'disabled nil)
  ;; 延迟加载
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
  (require 'dired-x)
  ;; 启动dired mode的时候启动org-download
  ;;(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC
* some functions
** 缩进
#+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (indent-region (region-beginning) (region-end))
	       (message "Indent selected region."))
	   (progn
	     (indent-buffer)
	     (message "Indent buffer.")))))
     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
#+END_SRC
** 快捷键
#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status))
    ;设置为每次调用magit-status即保存当前仓库中的所有track file
    (setq magit-save-repository-buffers 'dontask)
    )
#+END_SRC
* programing
** groovy
* uml
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :ensure
    :init
    ;; Open the .pu extension file with plantuml-mode
    (add-to-list 'auto-mode-alist '("\.puml$" . plantuml-mode))
    ;; active Org-babel languages
    (add-to-list
    'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(;; other Babel languages
       (plantuml . t)))
    (setq org-plantuml-jar-path
          (expand-file-name "~/env/plantuml.jar"))
    ;; Sample jar configuration
    (setq plantuml-jar-path "~/env/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-java-options "")
    ;; Comment in here if you want to preview plantuml as svg, png
    ;; Display ASCII art by default
    ;;(setq plantuml-output-type "svg")
    ;; chart is utf-8
    (setq plantuml-options "-charset UTF-8")


    (defun my-org-confirm-babel-evaluate (lang body)
      "Do not ask for confirmation to evaluate code for specified languages."
      (member lang '("puml")))
    ;; trust certain code as being safe
    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
    ;; automatically show the resulting image
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
    )
#+end_src

#+RESULTS:

* ui
** nyan-mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure
    :init
    (nyan-mode t))
#+end_src
** mode-line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (custom-set-faces
    '(mode-line ((t (:family "Noto Sans" :height 0.9))))
    '(mode-line-inactive ((t (:family "Noto Sans" :height 0.9))))))
#+end_src

#+RESULTS:
| doom-modeline-mode | magit-auto-revert-mode--init-kludge | magit-startup-asserts | magit-version |

** monitor
#+begin_src emacs-lisp
  (use-package symon
    :ensure
    :init
    (symon-mode t))
#+end_src
