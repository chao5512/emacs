#+STARTUP: overview
* repos
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "http://elpa.emacs-china.org/org/") t)
  ;;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  ;;(add-to-list 'package-archives
  ;;             '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  ;;(setq org-protocol-default-template-key "l")
  (server-start)
  (require 'cl)
  (global-hl-line-mode 1)
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-splash-screen t)
  (global-linum-mode t)
  (global-auto-revert-mode 1)
  (scroll-bar-mode -1)
  (setq cursor-type 'bar)
  (setq make-backup-files nil)
  (setq ring-bell-function 'ignore)
  (delete-selection-mode 1)
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
  ;; (set-face-attribute 'default nil :height 300)
  ;;ins
  (global-set-key (kbd "C-x y") 'overwrite-mode)
  ;;自动换行
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  (set-default-font "HanziPen SC:pixelsize=20:weight=normal:slant=normal:width=normal:spacing=0:scalable=true")
#+END_SRC
* recent buffer
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-item 10)

#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    ;;安装字体，不然后面主题图标会出错’,刚下载完第一次需要安装
    ;;(all-the-icons-install-fonts)
    )

  (use-package doom-themes
    :requires all-the-icons
    :ensure t
    :init
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-nord t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

#+END_SRC

* orgmode
#+BEGIN_SRC emacs-lisp
  (use-package org 
    :ensure t
    :pin org
    :config
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    ;; for inserting inactive dates
    (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))
    (setq org-agenda-files (list "~/org/gcal.org"
                                 "~/org/i.org"
                                 "~/org/schedule.org"
                                 "~/org/inbox.org"))

    ;;找到一个正确插入的位置
    (defun org-capture-template-goto-link ()
      (org-capture-put :target (list 'file+headline
                                     (nth 1 (org-capture-get :target))
                                     (org-capture-get :annotation)))
      (org-capture-put-target-region-and-position)
      (widen)
      (let ((hd (nth 2 (org-capture-get :target))))
        (goto-char (point-min))
        (if (re-search-forward
             (format org-complex-heading-regexp-format (regexp-quote hd)) nil t)
              (org-end-of-subtree)
          (goto-char (point-max))
          (or (bolp) (insert "\n"))
          (insert "* " hd "\n"))))

    (setq org-capture-templates
          '(
            ("a" "Appointment" entry (file  "~/org/gcal.org" )
             "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
            ("l" "Link" entry (file+headline "~/org/links.org" "Links")
             "* %? [[%:link][%:description]] \nCaptured On: %U" :prepend t)
            ("p" "web notes" entry (file+function "~/org/notes.org" org-capture-template-goto-link)
             "** %?\nSource:[[%:link][%:description]] \n%u\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n")
            ("L" "web bookmarks" entry (file+headline "~/org/bookmarks.org" "bookmarks")
             "* %?[[%:link][%:description]] \nCaptured On: %U" :prepend t)
            ("b" "Blog idea" entry (file+headline "~/org/i.org" "Blog Topics:")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "~/org/i.org" "To Do")
             "* TODO %?\n%u" :clock-in t :clock-resume t :prepend t)
            ("n" "Note" entry (file+headline "~/org/i.org" "Note space")
             "* %?\n%u" :prepend t)
            ("x" "inbox" entry (file "~/org/inbox.org")
             "* %?\n%T" :clock-in t :clock-resume t :prepend t)
            ))
    (setq org-agenda-custom-commands
          '(("c" "别逛了！！进来闲着啊~"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "这些任务就给你看看，千万别做，就放着:")))
              (agenda "")
              (alltodo "")))))
    (setq org-hide-leading-stars t)
    (setq org-src-fontify-natively t)
    (setq org-log-done 'time)
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (use-package org-bullets
      :ensure t
      :config
      :hook (org-mode-hook . org-bullets-mode)
      ;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      )
    )
  (custom-set-variables
   '(org-export-html-postamble nil)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   )

#+END_SRC
* pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package pomodoro
    :bind
    ("s-p" . org-pomodoro))

  (setq org-todo-keywords
        '((sequence "TODO(t!)" "NEXT(n)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")
          ))
  (setq org-todo-keyword-faces
        '(("NEXT" .      (:background "red" :foreground "white" :weight bold))
          ("SOMEDAY" .   (:background "DarkOrange":foreground "MediumBlue" :weight bold)) 
          ("PENDING" .   (:background "LightGreen" :foreground "gray" :weight bold))
          ("TODO" .      (:background "DarkOrange" :foreground "black" :weight bold))
          ("DONE" .      (:background "azure" :foreground "Darkgreen" :weight bold)) 
          ("ABORT" .     (:background "gray" :foreground "black"))
          ))

  ;; 优先级范围和默认任务的优先级
  (setq org-highest-priority ?A)
  (setq org-lowest-priority  ?E)
  (setq org-default-priority ?E)
  ;; 优先级醒目外观
  (setq org-priority-faces
        '((?A . (:background "red" :foreground "white" :weight bold))
          (?B . (:background "DarkOrange" :foreground "white" :weight bold))
          (?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
          (?D . (:background "DodgerBlue" :foreground "black" :weight bold))
          (?E . (:background "SkyBlue" :foreground "black" :weight bold))
          ))

  ;; 自动同步父级任务
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
* packages
** try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
 (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+End_SRC
** ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-scope 'frame)
      ;;(setq aw-dispatch-always 't)
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      ;;(global-set-key (kbd "C-x p") 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
#+END_SRC
** Swiper / Ivy / Counsel
Swiper gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
** yasnippet get code by typing short keys
#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode)
    (use-package yasnippet-snippets
      :ensure t)
    )
#+END_SRC
** Avy - navigate by searching for a letter on the screen and jumping to it
See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (:map global-map
          ;;跳转到能看到的字符前,甚至替代了ace-window
          ("C-r" . avy-goto-word-0)
          ("C-;" . avy-goto-char-timer)
          ("M-g l" . avy-goto-line)
          ("M-g f" . avy-copy-region)
          ("M-g c" . avy-copy-line)
          ("M-g k" . avy-kill-region)
          ("M-g m" . avy-move-region)
          ("M-g d" . avy-kill-whole-line)
          )
    )
#+END_SRC
** youdao
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :commands
    (youdao-dictionary-search-at-point+))
    (global-set-key (kbd "C-q") 'youdao-dictionary-search-at-point+)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t)
    (setq company-backends
          '((company-files company-yasnippet company-capf company-keywords)
            (company-abbrev company-dabbrev)))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
    )
  ;;为每个模式定制群组’
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           '(company-elisp)))
            )



                                          ;company box mode
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC
** Reveal.js
#+BEGIN_SRC emacs-lisp  :tangle no
  (use-package ox-reveal
    :ensure t
    :init
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )
  (use-package htmlize
    :ensure t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+END_SRC
** Misc packages
#+BEGIN_SRC emacs-lisp
       ; flashes the cursor's line when you scroll
       (use-package beacon
       :ensure t
       :config
       (beacon-mode 1)
       ; (setq beacon-color "#666600")
       )

       ; deletes all the whitespace when you hit backspace or delete
       (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t))
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
            (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("M--"   . treemacs-select-window)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

#+END_SRC
** projectile
#+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode t)
      (setq projectile-completion-system 'ivy)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (use-package counsel-projectile
        :ensure t
        :config
        ;;(define-key counsel-grep-map (kbd "C-c p s g") 'counsel-projectile-grep)
        )
      )
#+end_src
** pop window for quit
#+begin_src emacs-lisp
  (use-package popwin
    :ensure
    :config
    (popwin-mode t))
#+end_src
** log
#+begin_src emacs-lisp
  (use-package command-log-mode
    :config
    (global-command-log-mode t))
#+end_src
** revert C-x 1
#+begin_src emacs-lisp
  (use-package zygospore
    :ensure t
    :config
    (global-set-key (kbd "C-x 1")  'zygospore-toggle-delete-other-windows))
#+end_src
* diredmode
#+BEGIN_SRC emacs-lisp
  ;;递归删除拷贝
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  ;;重用buffer
  (put 'dired-find-alternate-file 'disabled nil)
  ;; 延迟加载
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
  (require 'dired-x)
  ;; 启动dired mode的时候启动org-download
  ;;(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC
* some functions
** 缩进
#+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (indent-region (region-beginning) (region-end))
	       (message "Indent selected region."))
	   (progn
	     (indent-buffer)
	     (message "Indent buffer.")))))
     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
#+END_SRC
** 快捷键
#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :init
      (progn
      (bind-key "C-x g" 'magit-status)
      ))
#+END_SRC
